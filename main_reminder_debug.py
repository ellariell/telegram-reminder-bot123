import asyncio
import logging
import json
from datetime import datetime, time
from aiogram import Bot, Dispatcher, Router, F
from aiogram.enums import ParseMode
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from utils_notes import parse_note, save_note, get_due_notes

TOKEN = "8096013474:AAHurnRuSxgxfuzYXs3XeGzsFlrExeXdacw"
USER_ID = 1130771677
LOG_FILE = "reminder_log.json"

logging.basicConfig(level=logging.INFO)

from aiogram.client.default import DefaultBotProperties
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ")],
        [KeyboardButton(text="üìã –ú–µ–Ω—é")]
    ],
    resize_keyboard=True
)

reminders = [
    (time(5, 50), "‚è∞ –ü–æ–¥—ä—ë–º! –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, —á–µ–º–ø–∏–æ–Ω!"),
    (time(6, 30), "üíä –£—Ç—Ä–µ–Ω–Ω–∏–µ —Ç–∞–±–ª–µ—Ç–∫–∏ –ø–æ—Å–ª–µ –µ–¥—ã!"),
    (time(12, 30), "üíä –û–±–µ–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–µ—Ç–∫–∏ ‚Äî –≤—Ä–µ–º—è –ø–æ–¥–∑–∞–ø—Ä–∞–≤–∏—Ç—å—Å—è!"),
    (time(16, 10), "üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–∫–æ—Ä–æ! –ù–∞–¥–µ–Ω—å –∫—Ä–æ—Å—Å–æ–≤–∫–∏, –Ω–∞—Å—Ç—Ä–æ–π –ø–ª–µ–π–ª–∏—Å—Ç –∏ –≤–ø–µ—Ä—ë–¥!"),
    (time(18, 30), "üíä –í–µ—á–µ—Ä–Ω–∏–µ —Ç–∞–±–ª–µ—Ç–∫–∏ ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–µ–Ω—å –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º!"),
    (time(23, 0), "üåô –°–æ–Ω! –ó–∞–≤—Ç—Ä–∞ —Å–Ω–æ–≤–∞ –ø–æ–±–µ–∂–¥–∞—Ç—å üí™")
]

def log_entry(message: str):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M")
    entry = {"time": timestamp, "message": message}
    try:
        with open(LOG_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except:
        data = []
    data.append(entry)
    with open(LOG_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

@router.message(F.text == "/start")
async def start(message: Message):
    if message.chat.id == USER_ID:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ ü§ñ –ì–æ—Ç–æ–≤ –∫ —Ç—Ä—É–¥—É –∏ –æ—Ç–¥—ã—Ö—É!", reply_markup=kb)

@router.message(F.text == "/check")
async def check(message: Message):
    if message.chat.id == USER_ID:
        await message.answer("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã.")

@router.message(F.text == "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ")
async def done(message: Message):
    if message.chat.id == USER_ID:
        log_entry("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.")
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø–∏—Å–∞–ª ‚úÖ")

@router.message(F.text == "üìã –ú–µ–Ω—é")
async def menu(message: Message):
    if message.chat.id == USER_ID:
        await message.answer("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æ", reply_markup=kb)

@router.message()
async def fallback(message: Message):
    if message.chat.id != USER_ID:
        return
    if message.text.lower().startswith("–Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ"):
        parsed = parse_note(message.text)
        if parsed:
            save_note(message.from_user.id, parsed)
            await message.answer(f"‚úÖ –ó–∞–ø–æ–º–Ω–∏–ª: {parsed['text']} –≤ {parsed['time']}")
        else:
            await message.answer("‚ö†Ô∏è –ù–µ–ø–æ–Ω—è—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: –Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ –∑–∞–≤—Ç—Ä–∞ –≤ 08:00 –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏")
    else:
        await message.answer("–Ø —Ç–µ–±—è –ø–æ–Ω—è–ª üòâ")


async def check_reminders():
    print("‚úÖ check_reminders –∑–∞–ø—É—â–µ–Ω–∞")
    while True:
        now = datetime.now().strftime("%Y-%m-%d %H:%M")

        # –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        current_time = datetime.now().time().replace(second=0, microsecond=0)
        for r_time, text in reminders:
            if current_time == r_time:
                print(f"üîî –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {text}")
                await bot.send_message(chat_id=USER_ID, text=text, reply_markup=kb)
                log_entry(f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")

        # –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        due_notes = get_due_notes(USER_ID)
        for note in due_notes:
            print(f"üîî –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {note['text']}")
            await bot.send_message(
                chat_id=USER_ID,
                text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {note['text']}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÅ –ù–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ–∑–∂–µ", callback_data="remind_later"),
                     InlineKeyboardButton(text="‚ùå –ù–µ –Ω—É–∂–Ω–æ", callback_data="remind_no")]
                ])
            )
        await asyncio.sleep(60)


async def main():
    asyncio.create_task(check_reminders())
    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

@dp.callback_query(F.data == "remind_later")
async def remind_later_callback(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    text = data.get("last_reminder", "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞")
    reminder_time = datetime.now() + timedelta(minutes=10)
    REMINDERS.append({
        "chat_id": callback.message.chat.id,
        "text": text,
        "time": reminder_time.strftime("%Y-%m-%d %H:%M")
    })
    await callback.message.answer(f"‚è≥ –•–æ—Ä–æ—à–æ, –Ω–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç.")
    await callback.answer()


@dp.callback_query(F.data == "remind_no")
async def remind_no_callback(callback: CallbackQuery):
    await callback.message.answer("‚úÖ –•–æ—Ä–æ—à–æ, –Ω–µ –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å.")
    await callback.answer()
