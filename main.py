import asyncio
import logging
import json
from datetime import datetime, time
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

BOT_TOKEN = "8096013474:AAHurnRuSxgxfuzYXs3XeGzsFlrExeXdacw"
USER_ID = 1130771677
LOG_FILE = "tablet_dialog_log.json"

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class TabletCheck(StatesGroup):
    awaiting_answer = State()

# –ö–Ω–æ–ø–∫–∏
kb_yes_no = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")]
], resize_keyboard=True)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
def log_entry(message: str):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M")
    entry = {"time": timestamp, "message": message}
    try:
        with open(LOG_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except:
        data = []
    data.append(entry)
    with open(LOG_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

@dp.message(commands=["start"])
async def start(message: Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–±–æ—Ç–∏—Ç—Å—è –æ —Ç–≤–æ–∏—Ö —Ç–∞–±–ª–µ—Ç–∫–∞—Ö üíä", reply_markup=kb_yes_no)
    await ask_tablets(message.chat.id, state)

@dp.message(TabletCheck.awaiting_answer, F.text.in_(["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"]))
async def handle_answer(message: Message, state: FSMContext):
    if message.text == "‚úÖ –î–∞":
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –†–∞–¥ —ç—Ç–æ —Å–ª—ã—à–∞—Ç—å üòä")
        log_entry("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø—Ä–∏—ë–º —Ç–∞–±–ª–µ—Ç–æ–∫")
    else:
        await message.answer("–û–∫–µ–π, –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç ‚è≥")
        log_entry("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –ø—Ä–∏–Ω—è–ª —Ç–∞–±–ª–µ—Ç–∫–∏")
        await asyncio.sleep(1800)
        await bot.send_message(chat_id=message.chat.id, text="üíä –ù–∞–ø–æ–º–∏–Ω–∞—é: –ø–æ—Ä–∞ –≤—Å—ë-—Ç–∞–∫–∏ –ø—Ä–∏–Ω—è—Ç—å —Ç–∞–±–ª–µ—Ç–∫–∏!")
    await state.clear()

@dp.message()
async def fallback(message: Message):
    await message.answer("–ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ üí¨")

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
async def ask_tablets(chat_id: int, state: FSMContext):
    await bot.send_message(chat_id=chat_id, text="üíä –¢—ã —É–∂–µ –ø—Ä–∏–Ω—è–ª —É—Ç—Ä–µ–Ω–Ω–∏–µ —Ç–∞–±–ª–µ—Ç–∫–∏?", reply_markup=kb_yes_no)
    await state.set_state(TabletCheck.awaiting_answer)

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤ 6:30 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
async def scheduler():
    while True:
        now = datetime.now().time().replace(second=0, microsecond=0)
        if now == time(6, 30):
            try:
                ctx = dp.fsm.get_context(bot, USER_ID)
                await ask_tablets(USER_ID, ctx)
                log_entry("üì§ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–¥–∞–Ω –≤–æ–ø—Ä–æ—Å –æ —Ç–∞–±–ª–µ—Ç–∫–∞—Ö –≤ 6:30")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞: {e}")
            await asyncio.sleep(60)
        await asyncio.sleep(30)

async def main():
    logging.basicConfig(level=logging.INFO)
    asyncio.create_task(scheduler())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())