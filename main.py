import telebot
import json
import os
import threading
import time
import re
import logging
from datetime import datetime, timedelta
from telebot import types

# ============ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ============
TOKEN = "8096013474:AAHurnRuSxgxfuzYXs3XeGzsFlrExeXdacw"
OWNER_ID = 1130771677
REMINDER_FILE = "reminders.json"

bot = telebot.TeleBot(TOKEN)

# üõ†Ô∏è –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å polling
bot.remove_webhook()


# ============ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ / –ó–∞–≥—Ä—É–∑–∫–∞ ============
def load_reminders():
    if os.path.exists(REMINDER_FILE):
        with open(REMINDER_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return []

def save_reminders():
    with open(REMINDER_FILE, "w", encoding="utf-8") as f:
        json.dump(reminders, f, ensure_ascii=False, indent=2)

# ============ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ñ—Ä–∞–∑ "—á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç" ============
def parse_relative_time(text):
    text = text.lower()
    now = datetime.now()

    if "—á–µ—Ä–µ–∑ –ø–æ–ª—á–∞—Å–∞" in text:
        return now + timedelta(minutes=30)

    m3 = re.search(r"—á–µ—Ä–µ–∑\s+(\d+)\s+—á–∞—Å(?:–∞|–æ–≤)?\s+(\d+)\s+–º–∏–Ω", text)
    m2 = re.search(r"—á–µ—Ä–µ–∑\s+(\d+)\s+—á–∞—Å", text)
    m1 = re.search(r"—á–µ—Ä–µ–∑\s+(\d+)\s+–º–∏–Ω", text)

    if m3:
        h, m = int(m3.group(1)), int(m3.group(2))
        return now + timedelta(hours=h, minutes=m)
    elif m2:
        return now + timedelta(hours=int(m2.group(1)))
    elif m1:
        return now + timedelta(minutes=int(m1.group(1)))

    return None

# ============ –†–∞–∑–±–æ—Ä —Ç–µ–∫—Å—Ç–∞ ============
def parse_repeat(text):
    text = text.lower()
    if "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å" in text or "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ" in text:
        return "daily"
    if "–±—É–¥–Ω–∏" in text or "–ø–æ –±—É–¥–Ω—è–º" in text:
        return "weekdays"
    days_map = {
        "–ø–Ω": "mo", "–≤—Ç": "tu", "—Å—Ä": "we",
        "—á—Ç": "th", "–ø—Ç": "fr", "—Å–±": "sa", "–≤—Å": "su"
    }
    picks = [days_map[d] for d in days_map if re.search(rf"\b{d}\b", text)]
    return picks if picks else None

def parse_reminder(text):
    relative = parse_relative_time(text)
    if relative:
        # –£–¥–∞–ª—è–µ–º "–Ω–∞–ø–æ–º–Ω–∏" –∏ "—á–µ—Ä–µ–∑ X –º–∏–Ω—É—Ç/—á–∞—Å–æ–≤", –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg_match = re.search(r"—á–µ—Ä–µ–∑\s+\d+\s+\w+\s+(.*)", text)
        msg = msg_match.group(1).strip() if msg_match else ""
        return {"time": relative.isoformat(), "message": msg, "repeat": None}

    # –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –≤—Ä–µ–º—è
    m = re.search(r"–≤\s+(\d{1,2}[:\-]\d{2})\s+(.+)", text)
    if not m:
        return None
    time_part, msg = m.groups()
    hour, minute = map(int, time_part.replace("-", ":").split(":"))
    now = datetime.now()
    dt = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
    if dt <= now:
        dt += timedelta(days=1)
    repeat = parse_repeat(text)
    return {"time": dt.isoformat(), "message": msg.strip(), "repeat": repeat}

# ============ –†–∞—Å—á—ë—Ç —Å–ª–µ–¥—É—é—â–µ–π –¥–∞—Ç—ã ============
def get_next_repeat_time(current_str, repeat):
    cur = datetime.fromisoformat(current_str)
    if repeat == "daily":
        return cur + timedelta(days=1)
    if repeat == "weekdays":
        nxt = cur + timedelta(days=1)
        while nxt.weekday() > 4:
            nxt += timedelta(days=1)
        return nxt
    if isinstance(repeat, list):
        dow = cur.weekday()
        names = ["mo", "tu", "we", "th", "fr", "sa", "su"]
        days_ahead = [(names.index(d) - dow) % 7 or 7 for d in repeat]
        return cur + timedelta(days=min(days_ahead))
    return None

# ============ –ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ ============
def reminder_checker():
    while True:
        now = datetime.now()
        for idx, r in enumerate(reminders[:]):
            rt = datetime.fromisoformat(r["time"])

            if rt <= now:
                if r.get("seen"):
                    continue  # ‚úÖ –£–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ

                user_id = r.get("user_id", OWNER_ID)

                # –ö–Ω–æ–ø–∫–∏: –Ω–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ–∑–∂–µ / –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
                kb = types.InlineKeyboardMarkup()
                kb.add(
                    types.InlineKeyboardButton("üîÅ –ù–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ–∑–∂–µ", callback_data=f"later|{idx}"),
                    types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm|{idx}")
                )
                bot.send_message(
                    user_id,
                    f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {r['message']}",
                    reply_markup=kb,
                    disable_notification=False  # üîä –≤–∫–ª—é—á–∞–µ–º –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                )

                # üîÅ –ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è ‚Äî –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è
                if r.get("repeat"):
                    nxt = get_next_repeat_time(r["time"], r["repeat"])
                    if nxt:
                        r["time"] = nxt.isoformat()
                    else:
                        reminders.remove(r)
                else:
                    # –û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ: –µ—Å–ª–∏ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç ‚Äî –≤–µ—Ä–Ω—ë–º—Å—è —á–µ—Ä–µ–∑ 2 –º–∏–Ω
                    r["time"] = (now + timedelta(minutes=2)).isoformat()

                save_reminders()
        time.sleep(30)


# ============ –ö–æ–º–∞–Ω–¥—ã ============
@bot.message_handler(commands=["start", "help"])
def send_welcome(message):
    bot.send_message(
        message.chat.id,
        "ü§ñ *–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –≤–µ–ª–∏–∫–∏–π –ø–æ–≤–µ–ª–∏—Ç–µ–ª—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π!*\n\n"
        "–Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–∞—Ä—å, —Ö—Ä–∞–Ω–∏—Ç–µ–ª—å –¥–µ–¥–ª–∞–π–Ω–æ–≤ –∏ –∑–∞—â–∏—Ç–Ω–∏–∫ –æ—Ç –∑–∞–±—ã–≤—á–∏–≤–æ—Å—Ç–∏.\n\n"
        "üìå –ü—Ä–∏–º–µ—Ä—ã:\n"
        "`–Ω–∞–ø–æ–º–Ω–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00 –≤—ã–ø–∏—Ç—å –∫–æ—Ñ–µ ‚òïÔ∏è`\n"
        "`–Ω–∞–ø–æ–º–Ω–∏ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç –ø–æ–∑–≤–æ–Ω–∏—Ç—å –±–∞–±—É—à–∫–µ ‚ù§Ô∏è`\n\n"
        "üí° –Ø –ø–æ–Ω–∏–º–∞—é —Ç–∞–∫–∏–µ —à—Ç—É–∫–∏:\n"
        "- `–∫–∞–∂–¥—ã–π –¥–µ–Ω—å`, `–ø–æ –±—É–¥–Ω—è–º`\n"
        "- `–ø–Ω`, `–≤—Ç`, `—Å—Ä`, `—á—Ç`, `–ø—Ç`, `—Å–±`, `–≤—Å`\n"
        "- `—á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç`, `—á–µ—Ä–µ–∑ 1 —á–∞—Å`, `—á–µ—Ä–µ–∑ –ø–æ–ª—á–∞—Å–∞`\n\n"
        "_–ù–∞–¥–æ –ª–∏—à—å —Å–∫–∞–∑–∞—Ç—å, –∏ —è –Ω–∞–ø–æ–º–Ω—é!_",
        parse_mode="Markdown"
    )
    show_menu(message)

@bot.message_handler(commands=["–º–µ–Ω—é", "menu"])
def show_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("üìã –°–ø–∏—Å–æ–∫", "üîî –í—Å–µ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
    markup.row("‚ùå –£–¥–∞–ª–∏—Ç—å", "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
    
    if message.chat.id == OWNER_ID:
        markup.row("üß† –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")

    bot.send_message(
        message.chat.id,
        "üì≤ *–ß–µ–≥–æ –∏–∑–≤–æ–ª–∏—Ç–µ, –º–æ–π –ø–æ–≤–µ–ª–∏—Ç–µ–ª—å?*\n–í—ã–±–∏—Ä–∞–π—Ç–µ, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å üëá",
        parse_mode="Markdown",
        reply_markup=markup
    )

    bot.send_message(message.chat.id, "üì≤ –í—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=markup)


INFO_LABEL = "üß† –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"

@bot.message_handler(func=lambda m: m.text in [
    "üìã –°–ø–∏—Å–æ–∫", "üîî –í—Å–µ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", "‚ùå –£–¥–∞–ª–∏—Ç—å", "‚ûï –î–æ–±–∞–≤–∏—Ç—å", INFO_LABEL
])
def handle_menu(message):
    if message.text == "üìã –°–ø–∏—Å–æ–∫":
        list_active(message)
    elif message.text == "üîî –í—Å–µ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è":
        list_all(message)
    elif message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å":
        show_delete_menu(message)
    elif message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å":
        bot.send_message(message.chat.id, "‚úçÔ∏è –ù–∞–ø–∏—à–∏: –Ω–∞–ø–æ–º–Ω–∏ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00 –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ")
    elif message.text == INFO_LABEL and message.chat.id == OWNER_ID:
        list_users(message)

@bot.message_handler(func=lambda m: m.text and m.text.lower().startswith("–Ω–∞–ø–æ–º–Ω–∏"))
def handle_reminder(message):
    r = parse_reminder(message.text.lower())
    if not r:
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –Ø –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å...\n"
            "_–ü–æ–ø—Ä–æ–±—É–π —Ç–∞–∫:_ `–Ω–∞–ø–æ–º–Ω–∏ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç —Å–¥–µ–ª–∞—Ç—å 37-–π –≥–ª–æ—Ç–æ–∫ –≤–æ–¥—ã üíß`",
            parse_mode="Markdown"
        )
        return

    r["message"] = r["message"].strip() or "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞"
    r["user_id"] = message.chat.id
    r["user_name"] = message.from_user.first_name
    r["seen"] = False

    reminders.append(r)
    save_reminders()

    rt = datetime.fromisoformat(r["time"]).strftime("%d.%m.%Y %H:%M")
    rep = f", üîÅ –ø–æ–≤—Ç–æ—Ä: *{r['repeat']}*" if r["repeat"] else ""

    bot.send_message(
        message.chat.id,
        f"üìù –ó–∞–ø–∏—Å–∞–ª –≤ —Å–≤–æ–π –¥—Ä–µ–≤–Ω–∏–π —Å–≤–∏—Ç–æ–∫!\n\n"
        f"üìÖ *–ö–æ–≥–¥–∞:* {rt}{rep}\n"
        f"üìå *–ß—Ç–æ:* {r['message']}",
        parse_mode="Markdown"
    )

# ============ –°–ø–∏—Å–∫–∏ ============
def list_active(message):
    now = datetime.now()
    user_id = message.chat.id

    active = [
        r for r in reminders
        if r.get("user_id") == user_id and
           not r.get("repeat") and
           not r.get("seen") and
           datetime.fromisoformat(r["time"]) > now
    ]

    if active:
        txt = "üìö *–¢–≤–æ–∏ –æ–∂–∏–¥–∞—é—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:*\n\n"
        for i, r in enumerate(active, 1):
            dt = datetime.fromisoformat(r["time"]).strftime("%d.%m.%Y %H:%M")
            txt += f"*{i}.* üóì {dt}\nüîî {r['message']}\n\n"
        bot.send_message(user_id, txt, parse_mode="Markdown")
    else:
        bot.send_message(
            user_id,
            "üßò‚Äç‚ôÇÔ∏è –ü–æ–∫–æ–π –∏ —Ç–∏—à–∏–Ω–∞... –£ —Ç–µ–±—è –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.\n"
            "_–ú–æ–∂–µ—Ç, —Å–∞–º–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–¥—É–º–∞—Ç—å —Å–µ–±–µ –ø–ª–∞–Ω –Ω–∞ –≤–µ—á–µ—Ä? üç∑_",
            parse_mode="Markdown"
        )



def list_all(message):
    now = datetime.now()
    user_id = message.chat.id
    upcoming = []
    confirmed = []

    for r in reminders:
        if r.get("user_id") != user_id or r.get("repeat"):
            continue
        rt = datetime.fromisoformat(r["time"])
        if r.get("seen"):
            confirmed.append(r)
        elif rt >= now:
            upcoming.append(r)
        else:
            confirmed.append(r)

    reply = ""

    if upcoming:
        reply += "üï∞ *–¢–µ, –∫—Ç–æ –∂–¥—É—Ç —Å–≤–æ–µ–≥–æ —á–∞—Å–∞:*\n\n"
        for i, r in enumerate(upcoming, 1):
            dt = datetime.fromisoformat(r["time"]).strftime("%d.%m.%Y %H:%M")
            time_str = f"üìÖ {dt} üïì"
            reply += f"*{i}.* üîî {r['message']}\n‚è≥ {time_str}\n\n"

    if confirmed:
        reply += "\n‚úÖ *–¢–æ, —á—Ç–æ —Ç—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª:* (–∏–ª–∏ –∑–∞–±—ã–ª, –Ω–æ —è –Ω–µ –æ–±–∏–∂–µ–Ω)\n\n"
        for i, r in enumerate(confirmed, 1):
            dt = datetime.fromisoformat(r["time"]).strftime("%d.%m.%Y %H:%M")
            time_str = f"üìÖ {dt} üïì"
            reply += f"*{i}.* üßæ {r['message']}\nüìå {time_str}\n\n"

    if not reply:
        reply = "ü¶ó –ù–∏ –æ–¥–Ω–æ–π –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏. –¢–∏—à–∏–Ω–∞... –ù–æ —ç—Ç–æ, –∫—Å—Ç–∞—Ç–∏, –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ ü§®"

    bot.send_message(user_id, reply, parse_mode="Markdown")




def list_all(message):
    now = datetime.now()
    user_id = message.chat.id
    upcoming = []
    confirmed = []

    for r in reminders:
        if r.get("user_id") != user_id or r.get("repeat"):
            continue
        rt = datetime.fromisoformat(r["time"])
        if r.get("seen"):
            confirmed.append(r)
        elif rt >= now:
            upcoming.append(r)
        else:
            confirmed.append(r)

    reply = ""

    if upcoming:
        reply += "üï∞ *–¢–µ, –∫—Ç–æ –∂–¥—É—Ç —Å–≤–æ–µ–≥–æ —á–∞—Å–∞:*\n\n"
        for i, r in enumerate(upcoming, 1):
            dt = datetime.fromisoformat(r["time"]).strftime("%d.%m.%Y %H:%M")
            time_str = f"üìÖ {dt} üïì"
            reply += f"*{i}.* üîî {r['message']}\n‚è≥ {time_str}\n\n"

    if confirmed:
        reply += "\n‚úÖ *–¢–æ, —á—Ç–æ —Ç—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª:* (–∏–ª–∏ –∑–∞–±—ã–ª, –Ω–æ —è –Ω–µ –æ–±–∏–∂–µ–Ω)\n\n"
        for i, r in enumerate(confirmed, 1):
            dt = datetime.fromisoformat(r["time"]).strftime("%d.%m.%Y %H:%M")
            time_str = f"üìÖ {dt} üïì"
            reply += f"*{i}.* üßæ {r['message']}\nüìå {time_str}\n\n"

    if not reply:
        reply = "ü¶ó –ù–∏ –æ–¥–Ω–æ–π –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏. –¢–∏—à–∏–Ω–∞... –ù–æ —ç—Ç–æ, –∫—Å—Ç–∞—Ç–∏, –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ ü§®"

    bot.send_message(user_id, reply, parse_mode="Markdown")

# ============ –£–¥–∞–ª–µ–Ω–∏–µ ============
from telebot import types
from datetime import datetime

marked_for_deletion = {}  # user_id -> set of reminder ids

def show_delete_menu(message):
    user_id = message.chat.id
    marked_for_deletion[user_id] = set()  # –æ–±–Ω—É–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ
    markup = generate_delete_keyboard(user_id, marked_for_deletion[user_id])

    bot.send_message(
        user_id,
        "üßπ *–í—ã–±–µ—Ä–∏, —á—Ç–æ —É–¥–∞–ª–∏—Ç—å:*\n_–ú–æ–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ!_\n\n–ù–∞–∂–º–∏ –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—á–µ—à—å —Å—Ç–µ—Ä–µ—Ç—å.\n–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –Ω–∞–∂–º–∏ ¬´üóë –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ¬ª.",
        reply_markup=markup,
        parse_mode="Markdown"
    )

def generate_delete_keyboard(user_id, marked_ids):
    markup = types.InlineKeyboardMarkup()
    user_reminders = [r for r in reminders if r.get("user_id") == user_id]

    for i, r in enumerate(user_reminders):
        r_id = str(id(r))
        dt = datetime.fromisoformat(r["time"]).strftime("%d.%m.%Y %H:%M")
        short_msg = r["message"][:30] + ("..." if len(r["message"]) > 30 else "")
        checked = "‚úÖ " if r_id in marked_ids else "üîò "
        markup.add(types.InlineKeyboardButton(
            f"{checked}{dt} ‚Äî {short_msg}",
            callback_data=f"markdel|{r_id}"
        ))

    if marked_ids:
        markup.add(types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ", callback_data="del_selected"))

    markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_del"))
    return markup

@bot.callback_query_handler(func=lambda call: call.data.startswith("markdel|"))
def mark_reminder_for_deletion(call):
    user_id = call.message.chat.id
    r_id = call.data.split("|")[1]

    if user_id not in marked_for_deletion:
        marked_for_deletion[user_id] = set()

    if r_id in marked_for_deletion[user_id]:
        marked_for_deletion[user_id].remove(r_id)
    else:
        marked_for_deletion[user_id].add(r_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = generate_delete_keyboard(user_id, marked_for_deletion[user_id])
    bot.edit_message_reply_markup(chat_id=user_id, message_id=call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "del_selected")
def delete_selected_reminders(call):
    user_id = call.message.chat.id
    to_delete = marked_for_deletion.get(user_id, set())
    before = len(reminders)

    reminders[:] = [r for r in reminders if str(id(r)) not in to_delete]
    after = len(reminders)
    deleted_count = before - after

    marked_for_deletion[user_id] = set()

    bot.edit_message_text(
        f"üóë –£–¥–∞–ª–µ–Ω–æ {deleted_count} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ(–π).",
        chat_id=user_id,
        message_id=call.message.message_id
    )

@bot.callback_query_handler(func=lambda call: call.data == "cancel_del")
def cancel_deletion(call):
    user_id = call.message.chat.id
    marked_for_deletion[user_id] = set()
    bot.edit_message_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", chat_id=user_id, message_id=call.message.message_id)
@bot.callback_query_handler(func=lambda call: call.data.startswith("del|"))
def handle_delete_callback(call):
    parts = call.data.split("|")
    key = parts[1]
    user_id = int(parts[2])

    if call.message.chat.id != user_id:
        bot.answer_callback_query(call.id, "üôÖ‚Äç‚ôÇÔ∏è –¢—ã –ª–µ–∑–µ—à—å –Ω–µ –≤ —Å–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!")
        return

    user_reminders = [r for r in reminders if r.get("user_id") == user_id]

    if key == "all":
        count = len(user_reminders)
        for r in user_reminders:
            reminders.remove(r)
        save_reminders()
        bot.edit_message_text(
            f"üß® *–£–Ω–∏—á—Ç–æ–∂–µ–Ω–æ –≤—Å—ë!* ({count} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å –≤ –º–∏—Ä –∏–Ω–æ–π ü™¶)",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            parse_mode="Markdown"
        )
        return

    try:
        idx = int(key)
        if 0 <= idx < len(user_reminders):
            r = user_reminders[idx]
            reminders.remove(r)
            save_reminders()
            dt = datetime.fromisoformat(r["time"]).strftime("%d.%m.%Y %H:%M")
            bot.edit_message_text(
                f"üóë *–£–¥–∞–ª–µ–Ω–æ:*\n_{dt}_ ‚Äî {r['message']}\n\n–ü—Ä–æ—â–∞–π, –¥–æ—Ä–æ–≥–∞—è –Ω–∞–ø–æ–º–∏–Ω–∞–ª–æ—á–∫–∞... üò¢",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                parse_mode="Markdown"
            )
        else:
            bot.answer_callback_query(call.id, "‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û–Ω–æ —É–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ... –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–∑—Ä–∞–∫ üëª")
    except Exception as e:
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ del|: {e}")
@bot.callback_query_handler(func=lambda call: call.data == "del_selected")
def delete_selected(call):
    user_id = call.from_user.id
    marked = marked_for_deletion.get(user_id, set())

    if not marked:
        bot.answer_callback_query(call.id, "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ.")
        return

    # –°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–æ —É–¥–∞–ª–µ–Ω–∏—è
    before = len(reminders)

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–ø–æ id –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏)
    reminders[:] = [r for r in reminders if str(id(r)) not in marked]

    # –°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ—Å–ª–µ
    after = len(reminders)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    save_reminders()

    # –û—á–∏—â–∞–µ–º –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ
    marked_for_deletion[user_id] = set()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Å—ë–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
    bot.edit_message_text(
        f"üßπ –£–¥–∞–ª–µ–Ω–æ {before - after} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. "
        f"–ü–æ–∫–æ–π—Ç–µ—Å—å —Å –º–∏—Ä–æ–º, –∑–∞–±—ã—Ç—ã–µ –¥–µ–ª–∞... ‚ö∞Ô∏è",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id
    )

# ============ –ó–∞–ø—É—Å–∫ ============
# ============ –ö–æ–º–∞–Ω–¥–∞ /—É_–∫–æ–≥–æ ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ============

@bot.message_handler(commands=["—É_–∫–æ–≥–æ"])
def list_users(message):
    if message.chat.id != OWNER_ID:
        return

    user_ids = sorted(set(r["user_id"] for r in reminders if "user_id" in r))
    markup = types.InlineKeyboardMarkup()
    for uid in user_ids:
        name = next((r.get("user_name", f"ID {uid}") for r in reminders if r.get("user_id") == uid), f"ID {uid}")
        markup.add(types.InlineKeyboardButton(f"{name}", callback_data=f"userlist|{uid}"))

    if not user_ids:
        bot.send_message(
            message.chat.id,
            "üì≠ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∏ —É –∫–æ–≥–æ –Ω–µ—Ç.",
            reply_markup=types.ReplyKeyboardRemove()
        )
    else:
        bot.send_message(
            message.chat.id,
            "üë• –£ –∫–æ–≥–æ –µ—Å—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
            reply_markup=markup
        )


@bot.callback_query_handler(func=lambda call: call.data.startswith("userlist|"))
def handle_user_list(call):
    uid = int(call.data.split("|")[1])
    user_reminders = [r for r in reminders if r.get("user_id") == uid]

    if not user_reminders:
        bot.answer_callback_query(call.id, "‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ—Ç.")
        return

    name = user_reminders[0].get("user_name", f"ID {uid}")
    reply = f"üìã –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name}:\n\n"

    for i, r in enumerate(user_reminders, 1):
        time_str = datetime.fromisoformat(r["time"]).strftime("%d.%m.%Y %H:%M")
        status = "‚úÖ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ" if r.get("seen") else "‚è≥ –æ–∂–∏–¥–∞–µ—Ç"
        reply += f"{i}. üïí {time_str} ‚Äî {r['message']} ({status})\n"

    bot.send_message(call.message.chat.id, reply)

@bot.callback_query_handler(func=lambda call: call.data.startswith("later|"))
def handle_later(call):
    idx = int(call.data.split("|")[1])
    if 0 <= idx < len(reminders):
        r = reminders[idx]
        if call.message.chat.id != r.get("user_id"):
            bot.answer_callback_query(call.id, "üôÖ‚Äç‚ôÇÔ∏è –≠—Ç–æ –Ω–µ —Ç–≤–æ—ë –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, —à–∏—Ñ—Ä—É–π—Å—è!")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Ç–µ–∫—É—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (—á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã)
        new_dt = datetime.now() + timedelta(minutes=2)
        r["time"] = new_dt.isoformat()

        save_reminders()
        bot.answer_callback_query(
            call.id,
            "‚è∞ –û—Ç–ª–æ–∂–µ–Ω–æ! –í–µ—Ä–Ω—É—Å—å —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã ‚Äî —Å –∫–æ—Ñ–µ, –ø–ª–µ–¥–æ–º –∏ —Ç–≤–æ–∏–º –¥–µ–ª–æ–º üß£‚òï"
        )
    else:
        bot.answer_callback_query(call.id, "‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û–Ω–æ —á—Ç–æ, —É—à–ª–æ –≤ –æ—Ç–ø—É—Å–∫?")


@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm|"))
def handle_confirm(call):
    idx = int(call.data.split("|")[1])
    if 0 <= idx < len(reminders):
        r = reminders[idx]
        if call.message.chat.id != r.get("user_id"):
            bot.answer_callback_query(call.id, "‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")
            return

        reminders[idx]["seen"] = True
        save_reminders()
        bot.edit_message_text(
            "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id
        )
    else:
        bot.answer_callback_query(call.id, "‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

reminders = load_reminders()
delete_sessions = {}

# –ü—Ä–æ–≤–µ—Ä–∏–º –∏ –¥–æ–ø–æ–ª–Ω–∏–º user_id –∏ user_name
for r in reminders:
    if "user_id" not in r:
        r["user_id"] = OWNER_ID
    if "user_name" not in r:
        try:
            chat = bot.get_chat(r["user_id"])
            r["user_name"] = chat.first_name
        except:
            r["user_name"] = f"ID {r['user_id']}"
@bot.message_handler(commands=["–æ–±–Ω–æ–≤–∏_–∏–º–µ–Ω–∞"])
def update_names(message):
    if message.chat.id != OWNER_ID:
        return

    updated = 0
    for r in reminders:
        if not r.get("user_name"):
            try:
                chat = bot.get_chat(r["user_id"])
                r["user_name"] = chat.first_name
                updated += 1
            except:
                continue
    save_reminders()
    bot.send_message(OWNER_ID, f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–º—ë–Ω: {updated}")


threading.Thread(target=reminder_checker, daemon=True).start()
print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
bot.infinity_polling()

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
