import asyncio
import logging
import json
from datetime import datetime, time
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from utils_notes import parse_note, save_note, get_due_notes
from aiohttp import web

BOT_TOKEN = "8096013474:AAHurnRuSxgxfuzYXs3XeGzsFlrExeXdacw"
USER_ID = 1130771677
LOG_FILE = "reminder_log.json"

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ")],
        [KeyboardButton(text="üìã –ú–µ–Ω—é")]
    ],
    resize_keyboard=True
)

reminders = [
    (time(5, 50), "‚è∞ –ü–æ–¥—ä—ë–º!"),
    (time(6, 30), "üíä –£—Ç—Ä–µ–Ω–Ω–∏–µ —Ç–∞–±–ª–µ—Ç–∫–∏!"),
    (time(12, 30), "üíä –¢–∞–±–ª–µ—Ç–∫–∏ –ø–æ—Å–ª–µ –æ–±–µ–¥–∞!"),
    (time(16, 10), "üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–∫–æ—Ä–æ!"),
    (time(18, 30), "üíä –í–µ—á–µ—Ä–Ω–∏–µ —Ç–∞–±–ª–µ—Ç–∫–∏!")
]

def log_entry(message: str):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M")
    entry = {"time": timestamp, "message": message}
    try:
        with open(LOG_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except:
        data = []
    data.append(entry)
    with open(LOG_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

@dp.message(F.text == "/start")
async def start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ ü§ñ", reply_markup=kb)

@dp.message(F.text == "/check")
async def check(message: Message):
    await message.answer("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã.")

@dp.message(F.text == "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ")
async def done(message: Message):
    log_entry("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.")
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø–∏—Å–∞–ª ‚úÖ")

@dp.message(F.text == "üìã –ú–µ–Ω—é")
async def menu(message: Message):
    await message.answer("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æ", reply_markup=kb)

@dp.message()
async def fallback(message: Message):
    if message.text.lower().startswith("–Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ"):
        parsed = parse_note(message.text)
        if parsed:
            save_note(message.from_user.id, parsed)
            await message.answer(f"‚úÖ –ó–∞–ø–æ–º–Ω–∏–ª: {parsed['text']} –≤ {parsed['time']}")
        else:
            await message.answer("‚ö†Ô∏è –ù–µ–ø–æ–Ω—è—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: –Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ –∑–∞–≤—Ç—Ä–∞ –≤ 08:00 –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏")
    else:
        await message.answer("–Ø —Ç–µ–±—è –ø–æ–Ω—è–ª üòâ")

async def scheduler():
    while True:
        now = datetime.now().time().replace(second=0, microsecond=0)
        for r_time, text in reminders:
            if now == r_time:
                await bot.send_message(chat_id=USER_ID, text=text)
                log_entry(f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")
        due_notes = get_due_notes(USER_ID)
        for note in due_notes:
            await bot.send_message(chat_id=USER_ID, text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {note['text']}")
        await asyncio.sleep(60)

async def on_startup(app):
    asyncio.create_task(scheduler())

async def handle(request):
    return web.Response(text="–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç üü¢")

app = web.Application()
app.router.add_get("/", handle)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    dp.startup.register(on_startup)
    web.run_app(app, port=8080)