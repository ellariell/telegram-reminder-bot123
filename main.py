import asyncio
import logging
import json
from datetime import datetime, time
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

BOT_TOKEN = "8096013474:AAHurnRuSxgxfuzYXs3XeGzsFlrExeXdacw"
USER_ID = 1130771677
LOG_FILE = "reminder_log.json"

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
kb = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ")],
    [KeyboardButton(text="üìã –ú–µ–Ω—é")]
], resize_keyboard=True)

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class TabletCheck(StatesGroup):
    awaiting_answer = State()

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
reminders = [
    (time(5, 50), "‚è∞ –ü–æ–¥—ä—ë–º! –í–ø–µ—Ä—ë–¥ –∫ –ø–æ–±–µ–¥–∞–º ‚òÄÔ∏è"),
    (time(6, 30), "üíä –í—Ä–µ–º—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö —Ç–∞–±–ª–µ—Ç–æ–∫ (–∏ —è –∑–∞–¥–∞–º –≤–æ–ø—Ä–æ—Å)"),
    (time(11, 30), "üç≤ –û–±–µ–¥ ‚Äî –≤—Ä–µ–º—è –ø–æ–¥–∫—Ä–µ–ø–∏—Ç—å—Å—è!"),
    (time(12, 30), "üíä –¢–∞–±–ª–µ—Ç–∫–∏ –ø–æ—Å–ª–µ –æ–±–µ–¥–∞!"),
    (time(16, 10), "üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É–∂–µ —Ä—è–¥–æ–º ‚Äî –≥–æ—Ç–æ–≤—å—Å—è!"),
    (time(18, 0), "üçΩÔ∏è –£–∂–∏–Ω! –ù–µ –∑–∞–±—ã–≤–∞–π –ø–æ–µ—Å—Ç—å!"),
    (time(18, 30), "üíä –í–µ—á–µ—Ä–Ω–∏–µ —Ç–∞–±–ª–µ—Ç–∫–∏ –∂–¥—É—Ç —Ç–µ–±—è"),
    (time(23, 0), "üåô –°–æ–Ω! –ü–æ—Ä–∞ –æ—Ç–¥—ã—Ö–∞—Ç—å, –≥–µ—Ä–æ–π üò¥")
]

# –õ–æ–≥
def log_entry(message: str):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M")
    entry = {"time": timestamp, "message": message}
    try:
        with open(LOG_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except:
        data = []
    data.append(entry)
    with open(LOG_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
@dp.message(F.text == "/start")
async def start(message: Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ –∏ –¥–∏–∞–ª–æ–≥–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫ üß†", reply_markup=kb)
    await ask_tablets(message.chat.id, state)

@dp.message(F.text == "/check")
async def check(message: Message):
    await message.answer("‚úÖ –Ø –∂–∏–≤ –∏ —Ä–∞–±–æ—Ç–∞—é! –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã.")

@dp.message(F.text == "üìã –ú–µ–Ω—é")
async def menu(message: Message):
    await message.answer("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æ", reply_markup=kb)

@dp.message(F.text == "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ")
async def done(message: Message):
    log_entry("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ")
    await message.answer("–ó–∞–ø–∏—Å–∞–ª! –ö—Ä–∞—Å–∞–≤—á–∏–∫ üí™")

@dp.message(TabletCheck.awaiting_answer, F.text.in_(["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"]))
async def handle_answer(message: Message, state: FSMContext):
    if message.text == "‚úÖ –î–∞":
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ üòä")
        log_entry("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø—Ä–∏—ë–º —Ç–∞–±–ª–µ—Ç–æ–∫")
    else:
        await message.answer("–û–∫–µ–π, —è –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç ‚è≥")
        log_entry("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –ø—Ä–∏–Ω—è–ª —Ç–∞–±–ª–µ—Ç–∫–∏ —É—Ç—Ä–æ–º")
        await asyncio.sleep(1800)
        await bot.send_message(chat_id=message.chat.id, text="üíä –≠–π, –Ω–µ –∑–∞–±—É–¥—å —Ç–∞–±–ª–µ—Ç–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!")
    await state.clear()

@dp.message()
async def fallback(message: Message):
    await message.answer("–ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–ª–∏ –∂–¥–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ‚è∞")

async def ask_tablets(chat_id: int, state: FSMContext):
    await bot.send_message(chat_id=chat_id, text="üíä –¢—ã —É–∂–µ –ø—Ä–∏–Ω—è–ª —É—Ç—Ä–µ–Ω–Ω–∏–µ —Ç–∞–±–ª–µ—Ç–∫–∏?", reply_markup=kb)
    await state.set_state(TabletCheck.awaiting_answer)

# –¶–∏–∫–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def scheduler():
    while True:
        now = datetime.now().time().replace(second=0, microsecond=0)
        for r_time, text in reminders:
            if now == r_time:
                try:
                    if r_time == time(6, 30):
                        ctx = dp.fsm.get_context(bot, USER_ID)
                        await ask_tablets(USER_ID, ctx)
                        log_entry("üì§ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å –≤ 6:30")
                    else:
                        await bot.send_message(chat_id=USER_ID, text=text, reply_markup=kb)
                        log_entry(f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
                await asyncio.sleep(60)
        await asyncio.sleep(20)

async def main():
    logging.basicConfig(level=logging.INFO)
    asyncio.create_task(scheduler())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())