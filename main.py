import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime, time
import logging

BOT_TOKEN = "8096013474:AAHurnRuSxgxfuzYXs3XeGzsFlrExeXdacw"
USER_ID = 1130771677

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

reminders = [
    (time(5, 50), "‚è∞ –í—Å—Ç–∞–≤–∞–π, —á–µ–º–ø–∏–æ–Ω! –ù–æ–≤—ã–π –¥–µ–Ω—å —É–∂–µ —Ç—É—Ç üí™"),
    (time(6, 30), "üíä –ù–µ –∑–∞–±—É–¥—å —É—Ç—Ä–µ–Ω–Ω–∏–µ —Ç–∞–±–ª–µ—Ç–∫–∏ (–ø–æ—Å–ª–µ –µ–¥—ã)!"),
    (time(12, 30), "üíä –í—Ä–µ–º—è –æ–±–µ–¥–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–µ—Ç–æ–∫ ‚Äî –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏!"),
    (time(18, 30), "üíä –í–µ—á–µ—Ä –Ω–∞—Å—Ç–∞–ª ‚Äî —Ç–∞–±–ª–µ—Ç–∫–∏ –∂–¥—É—Ç —Ç–µ–±—è!"),
]

kb_done = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ")]
], resize_keyboard=True)

@dp.message(F.text.lower() == "–º–µ–Ω—é")
async def menu(message: Message):
    await message.answer("üìã –ú–µ–Ω—é. –í—Å—ë –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º üëç", reply_markup=kb_done)

@dp.message(F.text == "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ")
async def confirm(message: Message):
    await message.answer("–û—Ç–º–µ—á–µ–Ω–æ! –ö—Ä–∞—Å–∞–≤—á–∏–∫ üß†")

@dp.message(commands=["start"])
async def start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ üîî –ñ–¥–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –ø–∏—à–∏ ¬´–º–µ–Ω—é¬ª –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å.")

async def reminder_loop():
    while True:
        now = datetime.now().time().replace(second=0, microsecond=0)
        for r_time, r_text in reminders:
            if now == r_time:
                try:
                    await bot.send_message(chat_id=USER_ID, text=r_text, reply_markup=kb_done)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        await asyncio.sleep(60)

async def main():
    logging.basicConfig(level=logging.INFO)
    asyncio.create_task(reminder_loop())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())