
import asyncio
import json
import logging
from datetime import datetime, time
from pathlib import Path

from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

TOKEN = "your_token_here"
USER_ID = 1130771677  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()
dp.include_router(router)
scheduler = AsyncIOScheduler()

history_file = Path("history.json")

def load_history():
    if history_file.exists():
        with open(history_file, "r") as f:
            return json.load(f)
    return {}

def save_history(data):
    with open(history_file, "w") as f:
        json.dump(data, f, indent=2)

completed = load_history()

reminders = [
    ("–ü–æ–¥—ä—ë–º", time(5, 50)),
    ("–ó–∞–≤—Ç—Ä–∞–∫", time(6, 10)),
    ("BCAA + –¶–∏—Ç—Ä—É–ª–ª–∏–Ω", time(15, 45)),
    ("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", time(16, 10)),
    ("–û–±–µ–¥", time(11, 30)),
    ("–£–∂–∏–Ω", time(18, 0)),
    ("–°–æ–Ω", time(23, 0)),
    ("–¢–∞–±–ª–µ—Ç–∫–∏", time(7, 30)),
    ("–í–æ–¥–∞", time(9, 0)),
]

jokes = {
    "–ü–æ–¥—ä—ë–º": ["üëÄ –ü–æ–¥—ä—ë–º, –≥–µ—Ä–æ–π! –ú–∏—Ä –∂–¥—ë—Ç —Ç–≤–æ–∏—Ö –ø–æ–±–µ–¥!", "üåÖ –ù–æ–≤—ã–π –¥–µ–Ω—å ‚Äî –Ω–æ–≤—ã–π —à–∞–Ω—Å! –í—Å—Ç–∞–≤–∞–π!"],
    "–ó–∞–≤—Ç—Ä–∞–∫": ["üç≥ –ó–∞–≤—Ç—Ä–∞–∫ ‚Äî —Ç–æ–ø–ª–∏–≤–æ —á–µ–º–ø–∏–æ–Ω–∞. –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π!", "ü•ö –û–º–ª–µ—Ç –Ω–µ —Å—ä–µ—Å—Ç —Å–µ–±—è —Å–∞–º!"],
    "BCAA + –¶–∏—Ç—Ä—É–ª–ª–∏–Ω": ["üß™ –ü–æ—Ä–∞ –∑–∞—Ä—è–¥–∏—Ç—å—Å—è! –†–∞–∑–º–µ—à–∞–π —à–µ–π–∫–µ—Ä –∏ –±—É–¥—å –≥–æ—Ç–æ–≤ –∫ –±–æ—é!"],
    "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞": ["üèãÔ∏è‚Äç‚ôÇÔ∏è –®—Ç–∞–Ω–≥–∞ –∂–¥—ë—Ç! –ê —Ç—ã –≥–æ—Ç–æ–≤?", "üî• –ü–æ—Ä–∞ –∫–∞—á–∞—Ç—å, –∞ –Ω–µ –∫–∞—á–∞—Ç—å—Å—è!"],
    "–û–±–µ–¥": ["üçù –û–±–µ–¥ ‚Äî –ª—É—á—à–∏–π –º–æ–º–µ–Ω—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è!", "ü•© –ë–µ–ª–æ–∫ –∑–æ–≤—ë—Ç!"],
    "–£–∂–∏–Ω": ["üçΩÔ∏è –ó–∞–∫—Ä–æ–π –¥–µ–Ω—å –ø–æ-–º—É–∂—Å–∫–∏. –£–∂–∏–Ω –≤ –¥–µ–ª–æ!", "üç≤ –ë–µ–∑ —É–∂–∏–Ω–∞ ‚Äî –Ω–µ—Ç —Ä–æ—Å—Ç–∞."],
    "–°–æ–Ω": ["üò¥ –•–≤–∞—Ç–∏—Ç –ª–∏—Å—Ç–∞—Ç—å, –ø–æ—Ä–∞ —Å–ø–∞—Ç—å!", "üõå –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!"],
    "–¢–∞–±–ª–µ—Ç–∫–∏": ["üíä –¢–∞–±–ª–µ—Ç–æ—Å—ã –≤ –±–æ–π!", "üß† –ù–µ –∑–∞–±—É–¥—å, —á—Ç–æ —Ç—ã –Ω–∞ –∫—É—Ä—Å–µ."],
    "–í–æ–¥–∞": ["üíß –ì–ª–æ—Ç–Ω–∏ –∂–∏–∑–Ω–∏! –í–æ–¥–∞ —Ä–µ—à–∞–µ—Ç.", "üö∞ –ü–æ–ø–µ–π, –Ω–µ –∑–∞—Å–æ—Ö–Ω–∏ :)"]
}

def done_button(event_id: str):
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done:{event_id}"))
    return builder.as_markup()

@router.message(F.text == "/start")
async def start_handler(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –∂–∏–≤ –∏ —Å–ª–µ–∂—É –∑–∞ —Ç–≤–æ–∏–º —Ä–µ–∂–∏–º–æ–º üü¢")

async def send_reminder(user_id: int, title: str):
    today = str(datetime.now().date())
    event_id = f"{title}:{today}"
    if completed.get(str(user_id), {}).get(event_id):
        return
    text = f"<b>{title}</b> ‚Äî {random_message(title)}"
    await bot.send_message(user_id, text, reply_markup=done_button(event_id))

@router.callback_query(F.data.startswith("done:"))
async def handle_done(call: CallbackQuery):
    user_id = str(call.from_user.id)
    event_id = call.data.split(":", 1)[1]
    completed.setdefault(user_id, {})[event_id] = True
    save_history(completed)
    await call.message.edit_text(f"‚úÖ <b>{event_id.split(':')[0]}</b> ‚Äî –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")

def random_message(title):
    import random
    return random.choice(jokes.get(title, [f"{title} ‚Äî –ø–æ—Ä–∞!"]))

async def schedule_all():
    for title, t in reminders:
        scheduler.add_job(send_reminder, CronTrigger(hour=t.hour, minute=t.minute), args=(USER_ID, title))

async def main():
    logging.basicConfig(level=logging.INFO)
    await schedule_all()
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
