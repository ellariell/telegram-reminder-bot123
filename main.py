import asyncio
import logging
import json
from datetime import datetime, time
from aiogram import Bot, Dispatcher, Router, F
from aiogram.enums import ParseMode
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiogram.client.default import DefaultBotProperties
from aiohttp import web
from utils_notes import parse_note, save_note, get_due_notes

TOKEN = "8096013474:AAHurnRuSxgxfuzYXs3XeGzsFlrExeXdacw"
USER_ID = 1130771677
WEBHOOK_PATH = f"/webhook"
WEBHOOK_SECRET = ""
WEBHOOK_URL = "https://telegram-reminder-bot123.onrender.com"
WEB_SERVER_HOST = "0.0.0.0"
WEB_SERVER_PORT = 8080
LOG_FILE = "reminder_log.json"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ")],
        [KeyboardButton(text="üìã –ú–µ–Ω—é")]
    ],
    resize_keyboard=True
)

reminders = [
    (time(5, 50), "‚è∞ –ü–æ–¥—ä—ë–º! –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, —á–µ–º–ø–∏–æ–Ω!"),
    (time(6, 30), "üíä –£—Ç—Ä–µ–Ω–Ω–∏–µ —Ç–∞–±–ª–µ—Ç–∫–∏ –ø–æ—Å–ª–µ –µ–¥—ã!"),
    (time(12, 30), "üíä –û–±–µ–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–µ—Ç–∫–∏ ‚Äî –≤—Ä–µ–º—è –ø–æ–¥–∑–∞–ø—Ä–∞–≤–∏—Ç—å—Å—è!"),
    (time(16, 10), "üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–∫–æ—Ä–æ! –ù–∞–¥–µ–Ω—å –∫—Ä–æ—Å—Å–æ–≤–∫–∏, –Ω–∞—Å—Ç—Ä–æ–π –ø–ª–µ–π–ª–∏—Å—Ç –∏ –≤–ø–µ—Ä—ë–¥!"),
    (time(18, 30), "üíä –í–µ—á–µ—Ä–Ω–∏–µ —Ç–∞–±–ª–µ—Ç–∫–∏ ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–µ–Ω—å –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º!"),
    (time(23, 00), "üåô –°–æ–Ω! –ó–∞–≤—Ç—Ä–∞ —Å–Ω–æ–≤–∞ –ø–æ–±–µ–∂–¥–∞—Ç—å üí™")
]

def log_entry(message: str):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M")
    entry = {"time": timestamp, "message": message}
    try:
        with open(LOG_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except:
        data = []
    data.append(entry)
    with open(LOG_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

@router.message(F.text == "/start")
async def start(message: Message):
    if message.chat.id == USER_ID:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ ü§ñ –ì–æ—Ç–æ–≤ –∫ —Ç—Ä—É–¥—É –∏ –æ—Ç–¥—ã—Ö—É!", reply_markup=kb)

@router.message(F.text == "/check")
async def check(message: Message):
    if message.chat.id == USER_ID:
        await message.answer("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã.")

@router.message(F.text == "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ")
async def done(message: Message):
    if message.chat.id == USER_ID:
        log_entry("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.")
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø–∏—Å–∞–ª ‚úÖ")

@router.message(F.text == "üìã –ú–µ–Ω—é")
async def menu(message: Message):
    if message.chat.id == USER_ID:
        await message.answer("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æ", reply_markup=kb)

@router.message()
async def fallback(message: Message):
    if message.chat.id != USER_ID:
        return
    if message.text.lower().startswith("–Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ"):
        parsed = parse_note(message.text)
        if parsed:
            save_note(message.from_user.id, parsed)
            await message.answer(f"‚úÖ –ó–∞–ø–æ–º–Ω–∏–ª: {parsed['text']} –≤ {parsed['time']}")
        else:
            await message.answer("‚ö†Ô∏è –ù–µ–ø–æ–Ω—è—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: –Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ –∑–∞–≤—Ç—Ä–∞ –≤ 08:00 –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏")
    else:
        await message.answer("–Ø —Ç–µ–±—è –ø–æ–Ω—è–ª üòâ")

async def scheduler():
    while True:
        now = datetime.now().time().replace(second=0, microsecond=0)
        for r_time, text in reminders:
            if now == r_time:
                await bot.send_message(chat_id=USER_ID, text=text, reply_markup=kb)
                log_entry(f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")
        due_notes = get_due_notes(USER_ID)
        for note in due_notes:
            await bot.send_message(chat_id=USER_ID, text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {note['text']}")
        await asyncio.sleep(60)

async def on_startup(bot: Bot):
    await bot.set_webhook(WEBHOOK_URL + WEBHOOK_PATH, secret_token=WEBHOOK_SECRET)
    asyncio.create_task(scheduler())

async def on_shutdown(bot: Bot):
    await bot.delete_webhook()

async def main():
    app = web.Application()
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    SimpleRequestHandler(dispatcher=dp, bot=bot, secret_token=WEBHOOK_SECRET).register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)

    logging.info(f"WEBHOOK URL: {WEBHOOK_URL + WEBHOOK_PATH}")
    logging.info(f"Listening on port {WEB_SERVER_PORT}")

    await web.run_app(app, host=WEB_SERVER_HOST, port=WEB_SERVER_PORT)  # ‚Üê –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å

if __name__ == "__main__":
    asyncio.run(main())

