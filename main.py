import asyncio
import logging
import json
from datetime import datetime, time
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from utils_notes import parse_note, save_note, get_due_notes

BOT_TOKEN = "8096013474:AAHurnRuSxgxfuzYXs3XeGzsFlrExeXdacw"
USER_ID = 1130771677
LOG_FILE = "reminder_log.json"

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ")],
        [KeyboardButton(text="üìã –ú–µ–Ω—é")]
    ],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ üëá"
)

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
class TabletCheck(StatesGroup):
    awaiting_answer = State()

# –Æ–º–æ—Ä–Ω—ã–µ —Ñ—Ä–∞–∑—ã
jokes = [
    "üß† –ù–µ –∑–∞–±—É–¥—å —Ç–∞–±–ª–µ—Ç–æ—Å—ã ‚Äî –æ–Ω–∏ —Ç–µ–±—è —Ç–æ–∂–µ –Ω–µ –∑–∞–±—ã–≤–∞—é—Ç!",
    "üí° –¢–∞–±–ª–µ—Ç–∫–∏ –Ω–µ –≤—ã–ø—å–µ—à—å ‚Äî –º—ã—à—Ü –Ω–µ –±—É–¥–µ—Ç!",
    "ü•º –û–¥–∏–Ω —Ç–∞–±–ª–µ—Ç–∫–∏–Ω –≤ –¥–µ–Ω—å ‚Äî –∏ —Ç—ã –Ω–µ –≤ –≥—Ä—É–ø–ø–µ —Ä–∏—Å–∫–∞ üòÑ"
]

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
reminders = [
    (time(5, 50), "‚è∞ –ü–æ–¥—ä—ë–º! –í–ø–µ—Ä—ë–¥ –∫ –ø–æ–±–µ–¥–∞–º ‚òÄÔ∏è"),
    (time(6, 30), "üíä –£—Ç—Ä–µ–Ω–Ω–∏–µ —Ç–∞–±–ª–µ—Ç–∫–∏! " + jokes[0]),
    (time(11, 30), "üç≤ –û–±–µ–¥! –î–∞–π –æ—Ä–≥–∞–Ω–∏–∑–º—É –±–µ–ª–æ–∫ –∏ –ª—é–±–æ–≤—å"),
    (time(12, 30), "üíä –í—Ä–µ–º—è —Ç–∞–±–ª–µ—Ç–æ–∫ –ø–æ—Å–ª–µ –æ–±–µ–¥–∞! " + jokes[1]),
    (time(16, 10), "üèãÔ∏è‚Äç‚ôÇÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ ‚Äî –Ω–∞–¥–µ–Ω—å –∫—Ä–æ—Å—Å—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π –ø–ª–µ–π–ª–∏—Å—Ç!"),
    (time(18, 0), "üçΩÔ∏è –£–∂–∏–Ω! –ë–µ–∑ –Ω–µ–≥–æ –Ω–∏ –º—ã—à—Ü—ã, –Ω–∏ —Å–∏–ª–∞ üòâ"),
    (time(18, 30), "üíä –í–µ—á–µ—Ä–Ω–∏–µ —Ç–∞–±–ª–µ—Ç–∫–∏! " + jokes[2]),
    (time(23, 0), "üåô –û—Ç–±–æ–π, —á–µ–º–ø–∏–æ–Ω. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–æ —Å–Ω–∞ üò¥")
]

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
def log_entry(message: str):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M")
    entry = {"time": timestamp, "message": message}
    try:
        with open(LOG_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except:
        data = []
    data.append(entry)
    with open(LOG_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# –ö–æ–º–∞–Ω–¥—ã
@dp.message(F.text == "/start")
async def start(message: Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ üíä
–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã—Ç—å –æ –≤–∞–∂–Ω–æ–º!", reply_markup=kb)
    await ask_tablets(message.chat.id, state)

@dp.message(F.text == "/check")
async def check(message: Message):
    await message.answer("‚úÖ –ë–æ—Ç –∂–∏–≤ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç! –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã.")

@dp.message(F.text == "üìã –ú–µ–Ω—é")
async def menu(message: Message):
    await message.answer("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ñ–¥–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–ª–∏ –¥–æ–±–∞–≤—å –Ω–æ–≤–æ–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏", reply_markup=kb)

@dp.message(F.text == "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ")
async def done(message: Message):
    log_entry("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ")
    await message.answer("–•–æ—Ä–æ—à! –ó–∞–ø–∏—Å–∞–ª –≤ –∂—É—Ä–Ω–∞–ª üìí")

# –û—Ç–≤–µ—Ç –Ω–∞ –¥–∏–∞–ª–æ–≥ —É—Ç—Ä–æ–º
@dp.message(TabletCheck.awaiting_answer, F.text.in_(["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"]))
async def handle_answer(message: Message, state: FSMContext):
    if message.text == "‚úÖ –î–∞":
        await message.answer("–ö—Ä–∞—Å–∞–≤–∞ üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!")
        log_entry("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø—Ä–∏—ë–º —Ç–∞–±–ª–µ—Ç–æ–∫")
    else:
        await message.answer("–ù–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç! üì£")
        log_entry("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–Ω—è–ª —Ç–∞–±–ª–µ—Ç–∫–∏ —É—Ç—Ä–æ–º")
        await asyncio.sleep(1800)
        await bot.send_message(chat_id=message.chat.id, text="üíä –ù–∞–ø–æ–º–∏–Ω–∞—é: —Ç–∞–±–ª–µ—Ç–∫–∏ –µ—â—ë –∂–¥—É—Ç —Ç–µ–±—è!")
    await state.clear()

@dp.message()
async def fallback(message: Message, state: FSMContext):
    if message.text.lower().startswith("–Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ"):
        parsed = parse_note(message.text)
        if parsed:
            save_note(message.from_user.id, parsed)
            await message.answer(f"‚úÖ –ó–∞–ø–æ–º–Ω–∏–ª! –ù–∞–ø–æ–º–Ω—é —Ç–µ–±–µ: {parsed['text']} –≤ {parsed['time']}")
        else:
            await message.answer("‚ö†Ô∏è –ù–µ –ø–æ–Ω—è–ª. –ü—Ä–∏–º–µ—Ä: –Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ –∑–∞–≤—Ç—Ä–∞ –≤ 08:00 –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ –¥—Ä—É–≥—É")
        return
    await message.answer("–ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–ª–∏ –∂–¥–∏ ‚è∞")

async def ask_tablets(chat_id: int, state: FSMContext):
    await bot.send_message(chat_id=chat_id, text="–¢—ã —É–∂–µ –ø—Ä–∏–Ω—è–ª —É—Ç—Ä–µ–Ω–Ω–∏–µ —Ç–∞–±–ª–µ—Ç–∫–∏? üíä", reply_markup=kb)
    await state.set_state(TabletCheck.awaiting_answer)

async def scheduler():
    while True:
        now = datetime.now().time().replace(second=0, microsecond=0)
        for r_time, text in reminders:
            if now == r_time:
                try:
                    if r_time == time(6, 30):
                        ctx = dp.fsm.get_context(bot, USER_ID)
                        await ask_tablets(USER_ID, ctx)
                        log_entry("üì§ –£—Ç—Ä–µ–Ω–Ω–∏–π –≤–æ–ø—Ä–æ—Å –≤ 6:30")
                    else:
                        await bot.send_message(chat_id=USER_ID, text=text, reply_markup=kb)
                        log_entry(f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        due_notes = get_due_notes(USER_ID)
        for note in due_notes:
            await bot.send_message(chat_id=USER_ID, text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {note['text']}")
        await asyncio.sleep(60)

async def main():
    logging.basicConfig(level=logging.INFO)
    asyncio.create_task(scheduler())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())