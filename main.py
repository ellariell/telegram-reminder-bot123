import asyncio
from datetime import datetime, time
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder
import random
import logging
import os

API_TOKEN = os.getenv("API_TOKEN") or "7648494160:AAFxkHe-E9-1revY1tMGM1gVFz92L6zaXKI"

bot = Bot(token=API_TOKEN, default=Bot.create_default(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á (–≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM)
schedule = {
    "ü•£ –ó–∞–≤—Ç—Ä–∞–∫": "06:10",
    "üíä –¢–∞–±–ª–µ—Ç–∫–∏": "06:30",
    "üíß –í–æ–¥–∞": "08:00",
    "üçõ –û–±–µ–¥": "11:30",
    "üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞": "16:30",
    "üçΩÔ∏è –£–∂–∏–Ω": "18:00",
    "üåô –°–æ–Ω": "23:00"
}

# –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
history = {}

# –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Ñ—Ä–∞–∑—ã
phrases = [
    "–í–ø–µ—Ä—ë–¥, —á–µ–º–ø–∏–æ–Ω! üí™",
    "–ù—É —á—Ç–æ, –ø–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å! üî•",
    "–¢–≤–æ—è —Ü–µ–ª—å –∂–¥—ë—Ç —Ç–µ–±—è üöÄ",
    "–ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ {} üòé",
    "{} ‚Äî –ø—É—Ç—å –∫ —É—Å–ø–µ—Ö—É!"
]

# –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
def confirm_kb(task):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done_{task}")
    return builder.as_markup()

# –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def send_reminders():
    while True:
        now = datetime.now().strftime("%H:%M")
        for task, task_time in schedule.items():
            if now == task_time:
                for chat_id in history:
                    phrase = random.choice(phrases).format(task)
                    await bot.send_message(chat_id, f"<b>{task}</b>
{phrase}", reply_markup=confirm_kb(task))
        await asyncio.sleep(60)

# /start
@dp.message(commands=["start"])
async def start(message: types.Message):
    history[message.chat.id] = []
    await message.answer("–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –≤–∞–∂–Ω—ã—Ö –≤–µ—â–∞—Ö üí°")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback
@dp.callback_query()
async def handle_callback(call: types.CallbackQuery):
    if call.data.startswith("done_"):
        task = call.data.split("_", 1)[1]
        history[call.message.chat.id].append((task, datetime.now().strftime("%H:%M")))
        await call.message.edit_text(f"‚úÖ {task} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –≤ {datetime.now().strftime('%H:%M')}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def echo(message: types.Message):
    await message.answer("–Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ ü§ñ. –ñ–¥—É –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–Ω–∏—Ç—å —Ç–µ–±–µ!")

async def main():
    asyncio.create_task(send_reminders())
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())