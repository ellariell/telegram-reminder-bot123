import logging
from aiogram import Bot, Dispatcher, executor, types
import asyncio
import os
from datetime import datetime

API_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

reminder_times = {
    "wake_up": "05:50",
    "breakfast": "06:10",
    "lunch": "11:30",
    "workout1": "16:30",
    "workout2": "17:00",
    "dinner1": "18:00",
    "dinner2": "18:30",
    "sleep": "23:00"
}

messages = {
    "wake_up": ["–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ü–æ—Ä–∞ –≤—Å—Ç–∞–≤–∞—Ç—å –∏ –ø–æ–∫–æ—Ä—è—Ç—å –º–∏—Ä üí™"],
    "breakfast": ["–ó–∞–≤—Ç—Ä–∞–∫ –∂–¥–µ—Ç —Ç–µ–±—è! –ü–æ—Ä–∞ –∑–∞—Ä—è–¥–∏—Ç—å—Å—è —ç–Ω–µ—Ä–≥–∏–µ–π üç≥"],
    "lunch": ["–û–±–µ–¥ ‚Äî —ç—Ç–æ –≤–∞–∂–Ω–æ! –ù–µ –∑–∞–±—É–¥—å –ø–æ–µ—Å—Ç—å ü•ó"],
    "workout1": ["–í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏! –ü–æ–≥–Ω–∞–ª–∏ –¥–µ–ª–∞—Ç—å —Ñ–æ—Ä–º—É üî•"],
    "workout2": ["–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–æ–≤—ë—Ç! –ù–µ –ø—Ä–æ—Å–ø–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å üèãÔ∏è"],
    "dinner1": ["–£–∂–∏–Ω –Ω–∞ –ø–æ–¥—Ö–æ–¥–µ! –ë–µ–ª–æ–∫ —Å–∞–º —Å–µ–±—è –Ω–µ —Å—ä–µ—Å—Ç üçó"],
    "dinner2": ["–ï—Å–ª–∏ –µ—â—ë –Ω–µ –ø–æ–µ–ª ‚Äî —Å–µ–π—á–∞—Å —Å–∞–º–æ–µ –≤—Ä–µ–º—è! ü•ò"],
    "sleep": ["–û—Ç–±–æ–π, –≥–µ—Ä–æ–π! –ó–∞–≤—Ç—Ä–∞ –Ω–æ–≤—ã–µ —Å–≤–µ—Ä—à–µ–Ω–∏—è üò¥"]
}

async def reminder_loop():
    while True:
        now = datetime.now().strftime("%H:%M")
        for key, time in reminder_times.items():
            if now == time:
                for msg in messages.get(key, []):
                    await bot.send_message(chat_id=user_id, text=msg + "\n–û—Ç–≤–µ—Ç—å: "–í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ"")
        await asyncio.sleep(60)

@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    global user_id
    user_id = message.chat.id
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –≤–∞–∂–Ω—ã—Ö –¥–µ–ª–∞—Ö üòä")
    asyncio.create_task(reminder_loop())

@dp.message_handler(lambda message: "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ" in message.text.lower())
async def confirm_handler(message: types.Message):
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –Ø –∑–∞–ø–∏—Å–∞–ª —ç—Ç–æ üëå")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
